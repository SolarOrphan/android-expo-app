{"ast":null,"code":"import mergeOptions from'merge-options';var merge=mergeOptions.bind({concatArrays:true,ignoreUndefined:true});function mergeLocalStorageItem(key,value){var oldValue=window.localStorage.getItem(key);if(oldValue){var oldObject=JSON.parse(oldValue);var newObject=JSON.parse(value);var nextValue=JSON.stringify(merge(oldObject,newObject));window.localStorage.setItem(key,nextValue);}else{window.localStorage.setItem(key,value);}}function createPromise(getValue,callback){return new Promise(function(resolve,reject){try{var value=getValue();callback===null||callback===void 0?void 0:callback(null,value);resolve(value);}catch(err){callback===null||callback===void 0?void 0:callback(err);reject(err);}});}function createPromiseAll(promises,callback,processResult){return Promise.all(promises).then(function(result){var _processResult;var value=(_processResult=processResult===null||processResult===void 0?void 0:processResult(result))!==null&&_processResult!==void 0?_processResult:null;callback===null||callback===void 0?void 0:callback(null,value);return Promise.resolve(value);},function(errors){callback===null||callback===void 0?void 0:callback(errors);return Promise.reject(errors);});}var AsyncStorage={getItem:function getItem(key,callback){return createPromise(function(){return window.localStorage.getItem(key);},callback);},setItem:function setItem(key,value,callback){return createPromise(function(){return window.localStorage.setItem(key,value);},callback);},removeItem:function removeItem(key,callback){return createPromise(function(){return window.localStorage.removeItem(key);},callback);},mergeItem:function mergeItem(key,value,callback){return createPromise(function(){return mergeLocalStorageItem(key,value);},callback);},clear:function clear(callback){return createPromise(function(){return window.localStorage.clear();},callback);},getAllKeys:function getAllKeys(callback){return createPromise(function(){var numberOfKeys=window.localStorage.length;var keys=[];for(var i=0;i<numberOfKeys;i+=1){var key=window.localStorage.key(i)||'';keys.push(key);}return keys;},callback);},flushGetRequests:function flushGetRequests(){return undefined;},multiGet:function multiGet(keys,callback){var promises=keys.map(function(key){return AsyncStorage.getItem(key);});var processResult=function processResult(result){return result.map(function(value,i){return[keys[i],value];});};return createPromiseAll(promises,callback,processResult);},multiSet:function multiSet(keyValuePairs,callback){var promises=keyValuePairs.map(function(item){return AsyncStorage.setItem(item[0],item[1]);});return createPromiseAll(promises,callback);},multiRemove:function multiRemove(keys,callback){var promises=keys.map(function(key){return AsyncStorage.removeItem(key);});return createPromiseAll(promises,callback);},multiMerge:function multiMerge(keyValuePairs,callback){var promises=keyValuePairs.map(function(item){var _AsyncStorage$mergeIt,_AsyncStorage$mergeIt2;return(_AsyncStorage$mergeIt=(_AsyncStorage$mergeIt2=AsyncStorage.mergeItem)===null||_AsyncStorage$mergeIt2===void 0?void 0:_AsyncStorage$mergeIt2.call(AsyncStorage,item[0],item[1]))!==null&&_AsyncStorage$mergeIt!==void 0?_AsyncStorage$mergeIt:Promise.reject('Not implemented');});return createPromiseAll(promises,callback);}};export default AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.ts"],"names":["merge","concatArrays","ignoreUndefined","oldValue","window","oldObject","JSON","newObject","nextValue","value","getValue","callback","resolve","reject","result","processResult","Promise","errors","AsyncStorage","getItem","createPromise","setItem","removeItem","mergeItem","mergeLocalStorageItem","clear","getAllKeys","numberOfKeys","keys","i","key","flushGetRequests","multiGet","promises","createPromiseAll","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(\n      (item) =>\n        AsyncStorage.mergeItem?.(item[0], item[1]) ??\n        Promise.reject('Not implemented')\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"]},"metadata":{},"sourceType":"module"}